// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mwGzpoHinpZ8pmKKQjKC6Q
// Component: x1YWet5WeWMp

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import Dialog from "../../Dialog"; // plasmic-import: U1HHI9SEh2Do/component
import Button from "../../Button"; // plasmic-import: O-sjQ-BfXg_q/component
import { AntdSliderMark } from "@plasmicpkgs/antd5/skinny/registerSlider";
import TextInput from "../../TextInput"; // plasmic-import: LzH8N_mpnwME/component
import Drawer from "../../Drawer"; // plasmic-import: F1bm_Pa7o7bk/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: mwGzpoHinpZ8pmKKQjKC6Q/projectcss
import sty from "./PlasmicHomepage小程序登录页面.module.css"; // plasmic-import: x1YWet5WeWMp/css

import 微信头上组件svgIcon from "./icons/PlasmicIcon__\u5FAE\u4FE1\u5934\u4E0A\u7EC4\u4EF6svg"; // plasmic-import: 2urmVQ_gGgJw/icon
import StatusBarsvgIcon from "./icons/PlasmicIcon__StatusBarsvg"; // plasmic-import: EesfGyxQueq1/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: CwTBZ1IwI4if/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: 2dD8tiAwY1Ar/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: I0J4Nz9jr2l5/icon
import 家康lOgo5画板1SvgIcon from "./icons/PlasmicIcon__\u5BB6\u5EB7lOgo5\u753B\u677F1Svg"; // plasmic-import: XFiodx7YYYgt/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 46jN7MIf2jcL/icon
import 人像201Svg2Icon from "./icons/PlasmicIcon__\u4EBA\u50CF201Svg2"; // plasmic-import: sPShlVlFbkCH/icon
import 人像2Svg2Icon from "./icons/PlasmicIcon__\u4EBA\u50CF2Svg2"; // plasmic-import: 5ynvzMQh9xjB/icon

createPlasmicElementProxy;

export type PlasmicHomepage小程序登录页面__VariantMembers = {};
export type PlasmicHomepage小程序登录页面__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage小程序登录页面__VariantsArgs;
export const PlasmicHomepage小程序登录页面__VariantProps =
  new Array<VariantPropType>();

export type PlasmicHomepage小程序登录页面__ArgsType = {
  首页?: string;
};
type ArgPropType = keyof PlasmicHomepage小程序登录页面__ArgsType;
export const PlasmicHomepage小程序登录页面__ArgProps = new Array<ArgPropType>(
  "\u9996\u9875"
);

export type PlasmicHomepage小程序登录页面__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  其他手机号?: Flex__<typeof AntdButton>;
  navigationBar?: Flex__<typeof NavigationBar>;
  dialog?: Flex__<typeof Dialog>;
  确定?: Flex__<typeof Button>;
  取消?: Flex__<typeof Button>;
  sliderMark?: Flex__<typeof AntdSliderMark>;
  手机号?: Flex__<typeof TextInput>;
  允许弹窗?: Flex__<typeof Drawer>;
  拒绝?: Flex__<typeof Button>;
  允许?: Flex__<typeof Button>;
  验证码?: Flex__<typeof TextInput>;
  验证码2?: Flex__<typeof TextInput>;
  其他手机登录2?: Flex__<typeof AntdButton>;
  手机号2?: Flex__<typeof TextInput>;
  同意条款?: Flex__<typeof Drawer>;
  允许2?: Flex__<typeof Button>;
  允许3?: Flex__<typeof Button>;
};

export interface DefaultHomepage小程序登录页面Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage小程序登录页面__RenderFunc(props: {
  variants: PlasmicHomepage小程序登录页面__VariantsArgs;
  args: PlasmicHomepage小程序登录页面__ArgsType;
  overrides: PlasmicHomepage小程序登录页面__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          首页: false
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "showDialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.showDialog;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "手机号.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "允许弹窗.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "验证码.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "手机号2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "同意条款.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "验证码2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "隐藏",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
            onClick={async event => {
              const $steps = {};

              $steps["goToPage"] = true
                ? (() => {
                    const actionArgs = {};
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToPage"] != null &&
                typeof $steps["goToPage"] === "object" &&
                typeof $steps["goToPage"].then === "function"
              ) {
                $steps["goToPage"] = await $steps["goToPage"];
              }
            }}
          >
            <AntdButton
              className={classNames("__wab_instance", sty.button__h3QjB)}
              disabled={false}
              ghost={false}
              loading={false}
              onClick={async () => {
                const $steps = {};

                $steps["updateDialogOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["dialog", "open"]
                        },
                        operation: 4,
                        value: $state.dialog.open
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDialogOpen"] != null &&
                  typeof $steps["updateDialogOpen"] === "object" &&
                  typeof $steps["updateDialogOpen"].then === "function"
                ) {
                  $steps["updateDialogOpen"] = await $steps["updateDialogOpen"];
                }
              }}
              shape={"default"}
              size={"medium"}
              submitsForm={false}
              target={false}
              type={"ghost"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__i6Zi
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FFFFFF" }}
                  >
                    {"\u6388\u6743\u767b\u5f55"}
                  </span>
                </React.Fragment>
              </div>
            </AntdButton>
            <AntdButton
              data-plasmic-name={"\u5176\u4ed6\u624b\u673a\u53f7"}
              data-plasmic-override={overrides.其他手机号}
              className={classNames("__wab_instance", sty.其他手机号)}
              danger={false}
              ghost={false}
              loading={false}
              onClick={async () => {
                const $steps = {};

                $steps["updateState隐藏"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["隐藏"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateState隐藏"] != null &&
                  typeof $steps["updateState隐藏"] === "object" &&
                  typeof $steps["updateState隐藏"].then === "function"
                ) {
                  $steps["updateState隐藏"] = await $steps["updateState隐藏"];
                }
              }}
              submitsForm={false}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uYBm
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "var(--token-RvPI6LyeIPmd)" }}
                  >
                    {"\u5176\u4ed6\u624b\u673a\u767b\u5f55"}
                  </span>
                </React.Fragment>
              </div>
            </AntdButton>
            <NavigationBar
              data-plasmic-name={"navigationBar"}
              data-plasmic-override={overrides.navigationBar}
              brand={
                <React.Fragment>
                  <微信头上组件svgIcon
                    className={classNames(projectcss.all, sty.svg__igDo9)}
                    role={"img"}
                  />

                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__nI5A
                    )}
                    component={Link}
                    href={"#"}
                    platform={"nextjs"}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__wDnGg)}
                      displayHeight={"55px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={{
                        src: "/plasmic/c_vevaluate/images/人像201Svg.svg",
                        fullWidth: 150,
                        fullHeight: 150,
                        aspectRatio: 1
                      }}
                    />
                  </PlasmicLink__>
                  <StatusBarsvgIcon
                    className={classNames(projectcss.all, sty.svg__v8Tn0)}
                    role={"img"}
                  />
                </React.Fragment>
              }
              className={classNames("__wab_instance", sty.navigationBar)}
              closeButton={
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___5Qfs5)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={"https://static1.plasmic.app/close.svg"}
                />
              }
              forceOpenMenu={false}
              itemsGap={0}
              menuItems={
                <PlasmicLink__
                  aria-hidden={"true"}
                  aria-labelledby={"\u672a\u767b\u5f55"}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__pKzz,
                    "\u672a\u767b\u5f55"
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                  target={undefined}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "var(--token-jgohepLVeKvh)" }}
                    >
                      {"\u672a\u767b\u5f55"}
                    </span>
                  </React.Fragment>
                </PlasmicLink__>
              }
              openButton={
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__rCbvy)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={"https://static1.plasmic.app/menu.svg"}
                />
              }
              responsiveBreakpoint={0}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__tBNqt)}
              displayHeight={"77px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"78px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/c_vevaluate/images/组938122222Png.png",
                fullWidth: 289,
                fullHeight: 285,
                aspectRatio: undefined
              }}
            />

            <Dialog
              data-plasmic-name={"dialog"}
              data-plasmic-override={overrides.dialog}
              body={
                <React.Fragment>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___9LHaf)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nmmHg
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {
                            "\u8bf7\u4f60\u52a1\u5fc5\u8ba4\u771f\u9605\u8bfb\u3001\u5145\u5206\u7406\u89e3\u201c\u670d\u52a1\u534f\u8bae\u201d\u548c\u201c\u9690\u79c1\u653f\u7b56\u201d\u5404\u6761\u6b3e\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e:\u4e3a\u4e86\u5411\u4f60\u63d0\u4f9b\u6570\u636e\u3001\u5206\u4eab\u7b49\u670d\u52a1\u6240\u8981\u83b7\u53d6\u7684\u6743\u9650\u4fe1\u606f\u3002\n\u4f60\u53ef\u4ee5\u9605\u8bfb"
                          }
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "var(--token-_T1cyz1fvJ5i)" }}
                        >
                          {"\u300a\u9690\u79c1\u653f\u7b56\u300b"}
                        </span>
                        <React.Fragment>
                          {
                            '\u4e86\u89e3\u8be6\u7ec6\u4fe1\u606f\u3002\u5982\u60a8\u540c\u610f\uff0c\u8bf7\u70b9\u51fb"\u540c\u610f"\u5f00\u59cb\u63a5\u53d7\u6211\u4eec\u7684\u670d\u52a1\u3002'
                          }
                        </React.Fragment>
                      </React.Fragment>
                    </div>
                  </Stack__>
                  <Button
                    data-plasmic-name={"\u786e\u5b9a"}
                    data-plasmic-override={overrides.确定}
                    className={classNames("__wab_instance", sty.确定)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateState同意条款Open"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["同意条款", "open"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateState同意条款Open"] != null &&
                        typeof $steps["updateState同意条款Open"] === "object" &&
                        typeof $steps["updateState同意条款Open"].then ===
                          "function"
                      ) {
                        $steps["updateState同意条款Open"] = await $steps[
                          "updateState同意条款Open"
                        ];
                      }

                      $steps["updateDialogOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["dialog", "open"]
                              },
                              operation: 0
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDialogOpen"] != null &&
                        typeof $steps["updateDialogOpen"] === "object" &&
                        typeof $steps["updateDialogOpen"].then === "function"
                      ) {
                        $steps["updateDialogOpen"] = await $steps[
                          "updateDialogOpen"
                        ];
                      }
                    }}
                    submitsForm={false}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bvPf
                      )}
                    >
                      {"\u786e\u5b9a"}
                    </div>
                  </Button>
                  <Button
                    data-plasmic-name={"\u53d6\u6d88"}
                    data-plasmic-override={overrides.取消}
                    className={classNames("__wab_instance", sty.取消)}
                    color={"clear"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateDialogOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["dialog", "open"]
                              },
                              operation: 0
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDialogOpen"] != null &&
                        typeof $steps["updateDialogOpen"] === "object" &&
                        typeof $steps["updateDialogOpen"].then === "function"
                      ) {
                        $steps["updateDialogOpen"] = await $steps[
                          "updateDialogOpen"
                        ];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mWpQg
                      )}
                    >
                      {"\u53d6\u6d88"}
                    </div>
                  </Button>
                </React.Fragment>
              }
              className={classNames("__wab_instance", sty.dialog)}
              noTrigger={true}
              onOpenChange={generateStateOnChangeProp($state, [
                "dialog",
                "open"
              ])}
              open={generateStateValueProp($state, ["dialog", "open"])}
              title={"\u9690\u79c1\u653f\u7b56"}
              trigger={null}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ukDme
              )}
            >
              {"\u7533\u8bf7\u83b7\u53d6\u4ee5\u4e0b\u6743\u9650\uff1a"}
            </div>
            <AntdSliderMark
              data-plasmic-name={"sliderMark"}
              data-plasmic-override={overrides.sliderMark}
              className={classNames("__wab_instance", sty.sliderMark)}
            />

            <TextInput
              data-plasmic-name={"\u624b\u673a\u53f7"}
              data-plasmic-override={overrides.手机号}
              autoFocus={false}
              className={classNames("__wab_instance", sty.手机号)}
              name={``}
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["手机号", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }}
              placeholder={"\u60a8\u7684\u624b\u673a\u53f7\u7801"}
              required={false}
              value={generateStateValueProp($state, ["手机号", "value"]) ?? ""}
            />

            <Drawer
              data-plasmic-name={"\u5141\u8bb8\u5f39\u7a97"}
              data-plasmic-override={overrides.允许弹窗}
              className={classNames("__wab_instance", sty.允许弹窗)}
              noTrigger={true}
              onOpenChange={generateStateOnChangeProp($state, [
                "允许弹窗",
                "open"
              ])}
              open={generateStateValueProp($state, ["允许弹窗", "open"])}
              slot={
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__dpWx7)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wE4Kh
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h5
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.h5___7PZt7
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#000000" }}
                            >
                              {
                                "\u83b7\u53d6\u4f60\u7684\u6635\u79f0\u3001\u5934\u50cf"
                              }
                            </span>
                          </React.Fragment>
                        </h5>
                      }
                      <React.Fragment>
                        {
                          "\u8865\u5145\u590d\u9aa8\u533b\u7597\u7cfb\u7edf\u5fae\u4fe1\u9a71\u52a8\u7528\u6237\u4fe1\u606f"
                        }
                      </React.Fragment>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3PSO
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h5
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.h5__doAk3
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#000000" }}
                            >
                              {"\u6211"}
                            </span>
                          </React.Fragment>
                        </h5>
                      }
                      <React.Fragment>
                        {"\u5fae\u4fe1\u6635\u79f0\u5934\u50cf"}
                      </React.Fragment>
                    </React.Fragment>
                  </div>
                  <人像201Svg2Icon
                    className={classNames(projectcss.all, sty.svg__mv3ZJ)}
                    role={"img"}
                  />
                </Stack__>
              }
              trigger={null}
            >
              <Button
                data-plasmic-name={"\u62d2\u7edd"}
                data-plasmic-override={overrides.拒绝}
                className={classNames("__wab_instance", sty.拒绝)}
                color={"softSand"}
                submitsForm={false}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0BhoN
                  )}
                >
                  {"\u62d2\u7edd"}
                </div>
              </Button>
              <Button
                data-plasmic-name={"\u5141\u8bb8"}
                data-plasmic-override={overrides.允许}
                className={classNames("__wab_instance", sty.允许)}
                color={"green"}
                submitsForm={false}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__n0G4
                  )}
                >
                  {"\u5141\u8bb8"}
                </div>
              </Button>
              <家康lOgo5画板1SvgIcon
                className={classNames(projectcss.all, sty.svg__m7WaC)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pgL1E
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h6
                      className={classNames(
                        projectcss.all,
                        projectcss.h6,
                        projectcss.__wab_text,
                        sty.h6__jAuRu
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{"      "}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#535353ED" }}
                        >
                          {"\u590d\u9aa8\u533b\u7597 \u7533\u8bf7"}
                        </span>
                      </React.Fragment>
                    </h6>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
              <ChecksvgIcon
                className={classNames(projectcss.all, sty.svg__xrHoz)}
                role={"img"}
              />

              <IconIcon
                className={classNames(projectcss.all, sty.svg__xfDom)}
                role={"img"}
              />

              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__dt9O
                )}
                component={Link}
                href={"https://www.plasmic.app/"}
                platform={"nextjs"}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h6
                      className={classNames(
                        projectcss.all,
                        projectcss.h6,
                        projectcss.__wab_text,
                        sty.h6__w9Nbs
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "var(--token-_T1cyz1fvJ5i)" }}
                        >
                          {
                            "\u4f7f\u7528\u5176\u4ed6\u5934\u50cf\u548c\u6635\u79f0"
                          }
                        </span>
                      </React.Fragment>
                    </h6>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </PlasmicLink__>
            </Drawer>
            {(() => {
              try {
                return $state.隐藏 == 1;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox__kTlKf)}>
                <Button
                  className={classNames("__wab_instance", sty.button___7V3WZ)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8Vcz3
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "var(--token-jgohepLVeKvh)" }}
                      >
                        {"\u83b7\u53d6\u9a8c\u8bc1\u7801"}
                      </span>
                    </React.Fragment>
                  </div>
                </Button>
                <TextInput
                  data-plasmic-name={"\u9a8c\u8bc1\u7801"}
                  data-plasmic-override={overrides.验证码}
                  className={classNames("__wab_instance", sty.验证码)}
                  name={``}
                  onChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, ["验证码", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }}
                  placeholder={"\u9a8c\u8bc1\u7801"}
                  value={
                    generateStateValueProp($state, ["验证码", "value"]) ?? ""
                  }
                />

                <TextInput
                  data-plasmic-name={"\u9a8c\u8bc1\u78012"}
                  data-plasmic-override={overrides.验证码2}
                  className={classNames("__wab_instance", sty.验证码2)}
                  name={``}
                  onChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, ["验证码2", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }}
                  placeholder={"\u624b\u673a\u53f7"}
                  value={
                    generateStateValueProp($state, ["验证码2", "value"]) ?? ""
                  }
                />

                <AntdButton
                  data-plasmic-name={"\u5176\u4ed6\u624b\u673a\u767b\u5f552"}
                  data-plasmic-override={overrides.其他手机登录2}
                  className={classNames("__wab_instance", sty.其他手机登录2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__psNh
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "var(--token-jgohepLVeKvh)" }}
                      >
                        {"\u624b\u673a\u53f7\u767b\u5f55"}
                      </span>
                    </React.Fragment>
                  </div>
                </AntdButton>
              </div>
            ) : null}
            {(() => {
              try {
                return $state.允许弹窗.open;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <TextInput
                data-plasmic-name={"\u624b\u673a\u53f72"}
                data-plasmic-override={overrides.手机号2}
                className={classNames("__wab_instance", sty.手机号2)}
                name={``}
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["手机号2", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }).apply(null, eventArgs);
                  (async event => {
                    const $steps = {};

                    $steps["updateState手机号Value"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["手机号", "value"]
                            },
                            operation: 0
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateState手机号Value"] != null &&
                      typeof $steps["updateState手机号Value"] === "object" &&
                      typeof $steps["updateState手机号Value"].then ===
                        "function"
                    ) {
                      $steps["updateState手机号Value"] = await $steps[
                        "updateState手机号Value"
                      ];
                    }
                  }).apply(null, eventArgs);
                }}
                placeholder={"\u624b\u673a\u53f7"}
                required={false}
                value={
                  generateStateValueProp($state, ["手机号2", "value"]) ?? ""
                }
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___3A6L1
              )}
            >
              {"\r\n"}
            </div>
            <Drawer
              data-plasmic-name={"\u540c\u610f\u6761\u6b3e"}
              data-plasmic-override={overrides.同意条款}
              className={classNames("__wab_instance", sty.同意条款)}
              noTrigger={true}
              onOpenChange={generateStateOnChangeProp($state, [
                "同意条款",
                "open"
              ])}
              open={generateStateValueProp($state, ["同意条款", "open"])}
              slot={
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ji1TS)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__adKoq
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h6
                          className={classNames(
                            projectcss.all,
                            projectcss.h6,
                            projectcss.__wab_text,
                            sty.h6__fZmt4
                          )}
                        >
                          {
                            "\u83b7\u53d6\u4f60\u7684\u6635\u79f0\u3001\u5934\u50cf"
                          }
                        </h6>
                      }
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "var(--token-WxvvgatuPYoJ)" }}
                      >
                        {
                          "\u8865\u5145\u590d\u9aa8\u533b\u7597\u7cfb\u7edf\u5fae\u4fe1\u9a71\u52a8\u7528\u6237\u4fe1\u606f"
                        }
                      </span>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ooThw
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h6
                          className={classNames(
                            projectcss.all,
                            projectcss.h6,
                            projectcss.__wab_text,
                            sty.h6__yoCyW
                          )}
                        >
                          {"\u8d75\u67d0\u67d0"}
                        </h6>
                      }
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "var(--token-WxvvgatuPYoJ)" }}
                      >
                        {"\u5fae\u4fe1\u6635\u79f0\u5934\u50cf"}
                      </span>
                    </React.Fragment>
                  </div>
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__ynCX)}
                    role={"img"}
                  />

                  <人像2Svg2Icon
                    className={classNames(projectcss.all, sty.svg__qra7I)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vKxjI
                    )}
                  >
                    {"\u590d\u9aa8\u533b\u7597    \u7533\u8bf7"}
                  </div>
                  <家康lOgo5画板1SvgIcon
                    className={classNames(projectcss.all, sty.svg__ow6M6)}
                    role={"img"}
                  />

                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__aaBp9
                    )}
                    component={Link}
                    href={"https://www.plasmic.app/"}
                    platform={"nextjs"}
                  >
                    {"\u4f7f\u7528\u5176\u4ed6\u5934\u50cf\u548c\u6635\u79f0"}
                  </PlasmicLink__>
                </Stack__>
              }
              trigger={null}
            >
              <Button
                data-plasmic-name={"\u5141\u8bb82"}
                data-plasmic-override={overrides.允许2}
                className={classNames("__wab_instance", sty.允许2)}
                color={"green"}
                onClick={async event => {
                  const $steps = {};

                  $steps["goTo小程序编辑基本信息"] = true
                    ? (() => {
                        const actionArgs = { destination: `/new-page` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goTo小程序编辑基本信息"] != null &&
                    typeof $steps["goTo小程序编辑基本信息"] === "object" &&
                    typeof $steps["goTo小程序编辑基本信息"].then === "function"
                  ) {
                    $steps["goTo小程序编辑基本信息"] = await $steps[
                      "goTo小程序编辑基本信息"
                    ];
                  }

                  $steps["useIntegration"] = true
                    ? (() => {
                        const actionArgs = {};
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["useIntegration"] != null &&
                    typeof $steps["useIntegration"] === "object" &&
                    typeof $steps["useIntegration"].then === "function"
                  ) {
                    $steps["useIntegration"] = await $steps["useIntegration"];
                  }

                  $steps["goToPage"] = true
                    ? (() => {
                        const actionArgs = {};
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToPage"] != null &&
                    typeof $steps["goToPage"] === "object" &&
                    typeof $steps["goToPage"].then === "function"
                  ) {
                    $steps["goToPage"] = await $steps["goToPage"];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kqlI3
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "var(--token-jgohepLVeKvh)" }}
                    >
                      {"\u5141\u8bb8"}
                    </span>
                  </React.Fragment>
                </div>
              </Button>
              <Button
                data-plasmic-name={"\u5141\u8bb83"}
                data-plasmic-override={overrides.允许3}
                className={classNames("__wab_instance", sty.允许3)}
                color={"softSand"}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateState同意条款Open"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["同意条款", "open"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateState同意条款Open"] != null &&
                    typeof $steps["updateState同意条款Open"] === "object" &&
                    typeof $steps["updateState同意条款Open"].then === "function"
                  ) {
                    $steps["updateState同意条款Open"] = await $steps[
                      "updateState同意条款Open"
                    ];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__utsAg
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#00A45CD9" }}
                    >
                      {"\u62d2\u7edd"}
                    </span>
                  </React.Fragment>
                </div>
              </Button>
            </Drawer>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "\u5176\u4ed6\u624b\u673a\u53f7",
    "navigationBar",
    "dialog",
    "\u786e\u5b9a",
    "\u53d6\u6d88",
    "sliderMark",
    "\u624b\u673a\u53f7",
    "\u5141\u8bb8\u5f39\u7a97",
    "\u62d2\u7edd",
    "\u5141\u8bb8",
    "\u9a8c\u8bc1\u7801",
    "\u9a8c\u8bc1\u78012",
    "\u5176\u4ed6\u624b\u673a\u767b\u5f552",
    "\u624b\u673a\u53f72",
    "\u540c\u610f\u6761\u6b3e",
    "\u5141\u8bb82",
    "\u5141\u8bb83"
  ],
  section: [
    "section",
    "\u5176\u4ed6\u624b\u673a\u53f7",
    "navigationBar",
    "dialog",
    "\u786e\u5b9a",
    "\u53d6\u6d88",
    "sliderMark",
    "\u624b\u673a\u53f7",
    "\u5141\u8bb8\u5f39\u7a97",
    "\u62d2\u7edd",
    "\u5141\u8bb8",
    "\u9a8c\u8bc1\u7801",
    "\u9a8c\u8bc1\u78012",
    "\u5176\u4ed6\u624b\u673a\u767b\u5f552",
    "\u624b\u673a\u53f72",
    "\u540c\u610f\u6761\u6b3e",
    "\u5141\u8bb82",
    "\u5141\u8bb83"
  ],
  其他手机号: ["\u5176\u4ed6\u624b\u673a\u53f7"],
  navigationBar: ["navigationBar"],
  dialog: ["dialog", "\u786e\u5b9a", "\u53d6\u6d88"],
  确定: ["\u786e\u5b9a"],
  取消: ["\u53d6\u6d88"],
  sliderMark: ["sliderMark"],
  手机号: ["\u624b\u673a\u53f7"],
  允许弹窗: ["\u5141\u8bb8\u5f39\u7a97", "\u62d2\u7edd", "\u5141\u8bb8"],
  拒绝: ["\u62d2\u7edd"],
  允许: ["\u5141\u8bb8"],
  验证码: ["\u9a8c\u8bc1\u7801"],
  验证码2: ["\u9a8c\u8bc1\u78012"],
  其他手机登录2: ["\u5176\u4ed6\u624b\u673a\u767b\u5f552"],
  手机号2: ["\u624b\u673a\u53f72"],
  同意条款: ["\u540c\u610f\u6761\u6b3e", "\u5141\u8bb82", "\u5141\u8bb83"],
  允许2: ["\u5141\u8bb82"],
  允许3: ["\u5141\u8bb83"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  其他手机号: typeof AntdButton;
  navigationBar: typeof NavigationBar;
  dialog: typeof Dialog;
  确定: typeof Button;
  取消: typeof Button;
  sliderMark: typeof AntdSliderMark;
  手机号: typeof TextInput;
  允许弹窗: typeof Drawer;
  拒绝: typeof Button;
  允许: typeof Button;
  验证码: typeof TextInput;
  验证码2: typeof TextInput;
  其他手机登录2: typeof AntdButton;
  手机号2: typeof TextInput;
  同意条款: typeof Drawer;
  允许2: typeof Button;
  允许3: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage小程序登录页面__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage小程序登录页面__VariantsArgs;
    args?: PlasmicHomepage小程序登录页面__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage小程序登录页面__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage小程序登录页面__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage小程序登录页面__ArgProps,
          internalVariantPropNames: PlasmicHomepage小程序登录页面__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage小程序登录页面__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName =
      "PlasmicHomepage\u5c0f\u7a0b\u5e8f\u767b\u5f55\u9875\u9762";
  } else {
    func.displayName = `PlasmicHomepage小程序登录页面.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage小程序登录页面 = Object.assign(
  // Top-level PlasmicHomepage小程序登录页面 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    其他手机号: makeNodeComponent("\u5176\u4ed6\u624b\u673a\u53f7"),
    navigationBar: makeNodeComponent("navigationBar"),
    dialog: makeNodeComponent("dialog"),
    确定: makeNodeComponent("\u786e\u5b9a"),
    取消: makeNodeComponent("\u53d6\u6d88"),
    sliderMark: makeNodeComponent("sliderMark"),
    手机号: makeNodeComponent("\u624b\u673a\u53f7"),
    允许弹窗: makeNodeComponent("\u5141\u8bb8\u5f39\u7a97"),
    拒绝: makeNodeComponent("\u62d2\u7edd"),
    允许: makeNodeComponent("\u5141\u8bb8"),
    验证码: makeNodeComponent("\u9a8c\u8bc1\u7801"),
    验证码2: makeNodeComponent("\u9a8c\u8bc1\u78012"),
    其他手机登录2: makeNodeComponent("\u5176\u4ed6\u624b\u673a\u767b\u5f552"),
    手机号2: makeNodeComponent("\u624b\u673a\u53f72"),
    同意条款: makeNodeComponent("\u540c\u610f\u6761\u6b3e"),
    允许2: makeNodeComponent("\u5141\u8bb82"),
    允许3: makeNodeComponent("\u5141\u8bb83"),

    // Metadata about props expected for PlasmicHomepage小程序登录页面
    internalVariantProps: PlasmicHomepage小程序登录页面__VariantProps,
    internalArgProps: PlasmicHomepage小程序登录页面__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage小程序登录页面;
/* prettier-ignore-end */
