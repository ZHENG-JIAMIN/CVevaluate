// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mwGzpoHinpZ8pmKKQjKC6Q
// Component: pYvu7qkAibHy

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import Checkbox from "../../Checkbox"; // plasmic-import: IeqjBi5ezEV_/component
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import 上传视频 from "../../\u4E0A\u4F20\u89C6\u9891"; // plasmic-import: VZu-WFpRaYeJ/component
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Button from "../../Button"; // plasmic-import: O-sjQ-BfXg_q/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: mwGzpoHinpZ8pmKKQjKC6Q/projectcss
import sty from "./Plasmic_37上传视频提示.module.css"; // plasmic-import: pYvu7qkAibHy/css

import 视频拍摄教学svgIcon from "./icons/PlasmicIcon__\u89C6\u9891\u62CD\u6444\u6559\u5B66svg"; // plasmic-import: xNhX_8rkGqNg/icon
import 上传视频svg2Icon from "./icons/PlasmicIcon__\u4E0A\u4F20\u89C6\u9891svg2"; // plasmic-import: gb5_G6hD3l7d/icon
import 微信头上组件svgIcon from "./icons/PlasmicIcon__\u5FAE\u4FE1\u5934\u4E0A\u7EC4\u4EF6svg"; // plasmic-import: 2urmVQ_gGgJw/icon
import StatusBarsvgIcon from "./icons/PlasmicIcon__StatusBarsvg"; // plasmic-import: EesfGyxQueq1/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: CwTBZ1IwI4if/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: 2dD8tiAwY1Ar/icon

createPlasmicElementProxy;

export type Plasmic_37上传视频提示__VariantMembers = {};
export type Plasmic_37上传视频提示__VariantsArgs = {};
type VariantPropType = keyof Plasmic_37上传视频提示__VariantsArgs;
export const Plasmic_37上传视频提示__VariantProps =
  new Array<VariantPropType>();

export type Plasmic_37上传视频提示__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof Plasmic_37上传视频提示__ArgsType;
export const Plasmic_37上传视频提示__ArgProps = new Array<ArgPropType>(
  "children"
);

export type Plasmic_37上传视频提示__OverridesType = {
  root?: Flex__<"div">;
  视频上传?: Flex__<"section">;
  text?: Flex__<"div">;
};

export interface Default_37上传视频提示Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function Plasmic_37上传视频提示__RenderFunc(props: {
  variants: Plasmic_37上传视频提示__VariantsArgs;
  args: Plasmic_37上传视频提示__ArgsType;
  overrides: Plasmic_37上传视频提示__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"\u89c6\u9891\u4e0a\u4f20"}
            data-plasmic-override={overrides.视频上传}
            className={classNames(projectcss.all, sty.视频上传)}
          >
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {
                "\u8bf7\u6839\u636e\u201c\u89c6\u9891\u62cd\u6444\u6559\u5b66\u201d\u4e2d\u7684\u63d0\u793a\u62cd\u6444\u89c6\u9891\uff0c\u5426\u5219\u5c06\u5f71\u54cd\u8bc4\u4f30\u7ed3\u679c\u3002"
              }
            </div>
            {renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <NavigationBar
                    brand={null}
                    className={classNames(
                      "__wab_instance",
                      sty.navigationBar__gPh5G
                    )}
                    closeButton={
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__ejLky)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={"https://static1.plasmic.app/close.svg"}
                      />
                    }
                    forceOpenMenu={false}
                    itemsGap={0}
                    menuItems={
                      <PlasmicLink__
                        aria-hidden={"true"}
                        aria-labelledby={"\u672a\u767b\u5f55"}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__euRgq,
                          "\u672a\u767b\u5f55"
                        )}
                        component={Link}
                        href={"/"}
                        platform={"nextjs"}
                        target={undefined}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "var(--token-jgohepLVeKvh)" }}
                          >
                            {"\u4e0a\u4f20\u89c6\u9891"}
                          </span>
                        </React.Fragment>
                      </PlasmicLink__>
                    }
                    openButton={
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___7U99C)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={"https://static1.plasmic.app/menu.svg"}
                      />
                    }
                    responsiveBreakpoint={0}
                  />

                  <Checkbox
                    className={classNames(
                      "__wab_instance",
                      sty.checkbox___32HJx
                    )}
                  >
                    {"\u4f7f\u7528\u80f3\u818a\u5e2e\u52a9"}
                  </Checkbox>
                  <Timer
                    className={classNames("__wab_instance", sty.timer__xNqpw)}
                    isRunning={true}
                    runWhileEditing={false}
                  />

                  <上传视频
                    className={classNames(
                      "__wab_instance",
                      sty.上传视频__d5XV9
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__v2AAn
                      )}
                    >
                      {"1.\u5750\u59ff"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zg1Xu
                      )}
                    >
                      {"\u89c6\u9891\u62cd\u6444\u6559\u5b66"}
                    </div>
                    <视频拍摄教学svgIcon
                      className={classNames(projectcss.all, sty.svg__cyKd)}
                      role={"img"}
                    />

                    <UploadWrapper
                      accept={""}
                      className={classNames(
                        "__wab_instance",
                        sty.upload__guA3P
                      )}
                      files={[]}
                      showUploadList={true}
                    >
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__xuVdi
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zOyNp
                          )}
                        >
                          {"\u70b9\u51fb\u4e0a\u4f20\u89c6\u9891"}
                        </div>
                        <上传视频svg2Icon
                          className={classNames(projectcss.all, sty.svg__l0Mm)}
                          role={"img"}
                        />
                      </AntdButton>
                    </UploadWrapper>
                  </上传视频>
                  <上传视频
                    className={classNames(
                      "__wab_instance",
                      sty.上传视频__zn96G
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dgSpO
                      )}
                    >
                      {"1.\u81ea\u7136\u5750\u8d77"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__j9Vtx
                      )}
                    >
                      {"\u89c6\u9891\u62cd\u6444\u6559\u5b66"}
                    </div>
                    <视频拍摄教学svgIcon
                      className={classNames(projectcss.all, sty.svg___9R3W9)}
                      role={"img"}
                    />

                    <UploadWrapper
                      accept={""}
                      className={classNames(
                        "__wab_instance",
                        sty.upload__p4S09
                      )}
                      files={[]}
                      showUploadList={true}
                    >
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__o6K7S
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sup0S
                          )}
                        >
                          {"\u70b9\u51fb\u4e0a\u4f20\u89c6\u9891"}
                        </div>
                        <上传视频svg2Icon
                          className={classNames(projectcss.all, sty.svg__rvFc1)}
                          role={"img"}
                        />
                      </AntdButton>
                    </UploadWrapper>
                  </上传视频>
                  <上传视频
                    className={classNames(
                      "__wab_instance",
                      sty.上传视频__pmrQh
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__x4N1
                      )}
                    >
                      {"3.\u5750\u4e0b"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__crGp
                      )}
                    >
                      {"\u89c6\u9891\u62cd\u6444\u6559\u5b66"}
                    </div>
                    <视频拍摄教学svgIcon
                      className={classNames(projectcss.all, sty.svg__wq46W)}
                      role={"img"}
                    />

                    <UploadWrapper
                      accept={""}
                      className={classNames(
                        "__wab_instance",
                        sty.upload__qkZgZ
                      )}
                      files={[]}
                      showUploadList={true}
                    >
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__zGaQb
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tlqap
                          )}
                        >
                          {"\u70b9\u51fb\u4e0a\u4f20\u89c6\u9891"}
                        </div>
                        <上传视频svg2Icon
                          className={classNames(projectcss.all, sty.svg__aV2BI)}
                          role={"img"}
                        />
                      </AntdButton>
                    </UploadWrapper>
                  </上传视频>
                  <微信头上组件svgIcon
                    className={classNames(projectcss.all, sty.svg__bYeOy)}
                    role={"img"}
                  />

                  <StatusBarsvgIcon
                    className={classNames(projectcss.all, sty.svg__lFEpL)}
                    role={"img"}
                  />

                  <Checkbox
                    className={classNames(
                      "__wab_instance",
                      sty.checkbox__xOrN0
                    )}
                  >
                    {"\u5b58\u5728\u5b89\u5168\u98ce\u9669"}
                  </Checkbox>
                  <Button
                    className={classNames("__wab_instance", sty.button__infF0)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nYhnX
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "var(--token-jgohepLVeKvh)" }}
                        >
                          {"\u63d0\u4ea4"}
                        </span>
                      </React.Fragment>
                    </div>
                  </Button>
                  <section
                    className={classNames(projectcss.all, sty.section__zWdQn)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__jUh2X)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"57px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/c_vevaluate/images/_28感叹号圆框22Svg.svg",
                        fullWidth: 150,
                        fullHeight: 150,
                        aspectRatio: 1
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tHzgn
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "var(--token-jgohepLVeKvh)" }}
                        >
                          {"\u8bf7\u4e0a\u4f20\u5404\u9879\u89c6\u9891"}
                        </span>
                      </React.Fragment>
                    </div>
                  </section>
                </React.Fragment>
              ),
              value: args.children
            })}
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "\u89c6\u9891\u4e0a\u4f20", "text"],
  视频上传: ["\u89c6\u9891\u4e0a\u4f20", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  视频上传: "section";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmic_37上传视频提示__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmic_37上传视频提示__VariantsArgs;
    args?: Plasmic_37上传视频提示__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<Plasmic_37上传视频提示__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      Plasmic_37上传视频提示__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: Plasmic_37上传视频提示__ArgProps,
          internalVariantPropNames: Plasmic_37上传视频提示__VariantProps
        }),
      [props, nodeName]
    );
    return Plasmic_37上传视频提示__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic_37\u4e0a\u4f20\u89c6\u9891\u63d0\u793a";
  } else {
    func.displayName = `Plasmic_37上传视频提示.${nodeName}`;
  }
  return func;
}

export const Plasmic_37上传视频提示 = Object.assign(
  // Top-level Plasmic_37上传视频提示 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    视频上传: makeNodeComponent("\u89c6\u9891\u4e0a\u4f20"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for Plasmic_37上传视频提示
    internalVariantProps: Plasmic_37上传视频提示__VariantProps,
    internalArgProps: Plasmic_37上传视频提示__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default Plasmic_37上传视频提示;
/* prettier-ignore-end */
