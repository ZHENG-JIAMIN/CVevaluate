// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mwGzpoHinpZ8pmKKQjKC6Q
// Component: 2jtaUg30gpCQ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Dialog from "../../Dialog"; // plasmic-import: U1HHI9SEh2Do/component
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import TextInput from "../../TextInput"; // plasmic-import: LzH8N_mpnwME/component
import Button from "../../Button"; // plasmic-import: O-sjQ-BfXg_q/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: mwGzpoHinpZ8pmKKQjKC6Q/projectcss
import sty from "./Plasmic_36小程序评估神经功能评估.module.css"; // plasmic-import: 2jtaUg30gpCQ/css

import 微信头上组件svgIcon from "./icons/PlasmicIcon__\u5FAE\u4FE1\u5934\u4E0A\u7EC4\u4EF6svg"; // plasmic-import: 2urmVQ_gGgJw/icon
import StatusBarsvgIcon from "./icons/PlasmicIcon__StatusBarsvg"; // plasmic-import: EesfGyxQueq1/icon
import 走路svgIcon from "./icons/PlasmicIcon__\u8D70\u8DEFsvg"; // plasmic-import: pLJD4rGnKrzD/icon
import 诊断报告svgIcon from "./icons/PlasmicIcon__\u8BCA\u65AD\u62A5\u544Asvg"; // plasmic-import: d3AKD0_3XKXS/icon
import 神经svgIcon from "./icons/PlasmicIcon__\u795E\u7ECFsvg"; // plasmic-import: Z9ZrL-kr1Ffo/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: I0J4Nz9jr2l5/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: CwTBZ1IwI4if/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: 2dD8tiAwY1Ar/icon

createPlasmicElementProxy;

export type Plasmic_36小程序评估神经功能评估__VariantMembers = {};
export type Plasmic_36小程序评估神经功能评估__VariantsArgs = {};
type VariantPropType = keyof Plasmic_36小程序评估神经功能评估__VariantsArgs;
export const Plasmic_36小程序评估神经功能评估__VariantProps =
  new Array<VariantPropType>();

export type Plasmic_36小程序评估神经功能评估__ArgsType = {
  关闭?: boolean;
};
type ArgPropType = keyof Plasmic_36小程序评估神经功能评估__ArgsType;
export const Plasmic_36小程序评估神经功能评估__ArgProps =
  new Array<ArgPropType>("\u5173\u95ed");

export type Plasmic_36小程序评估神经功能评估__OverridesType = {
  root?: Flex__<"div">;
  navigationBar?: Flex__<typeof NavigationBar>;
  请输入患者信息?: Flex__<typeof Dialog>;
  radioGroup?: Flex__<typeof AntdRadioGroup>;
  textInput?: Flex__<typeof TextInput>;
  textInput2?: Flex__<typeof TextInput>;
  textInput3?: Flex__<typeof TextInput>;
  textInput4?: Flex__<typeof TextInput>;
};

export interface Default_36小程序评估神经功能评估Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function Plasmic_36小程序评估神经功能评估__RenderFunc(props: {
  variants: Plasmic_36小程序评估神经功能评估__VariantsArgs;
  args: Plasmic_36小程序评估神经功能评估__ArgsType;
  overrides: Plasmic_36小程序评估神经功能评估__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          关闭: false
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "请输入患者信息.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "radioGroup.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <section className={classNames(projectcss.all, sty.section__w9Yg)}>
            <NavigationBar
              data-plasmic-name={"navigationBar"}
              data-plasmic-override={overrides.navigationBar}
              brand={
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__zn7Yr
                  )}
                  component={Link}
                  href={"#"}
                  platform={"nextjs"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__ekXhy)}
                    displayHeight={"55px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    src={{
                      src: "/plasmic/c_vevaluate/images/人像201Svg.svg",
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }}
                  />
                </PlasmicLink__>
              }
              className={classNames("__wab_instance", sty.navigationBar)}
              closeButton={
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__mxloq)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={"https://static1.plasmic.app/close.svg"}
                />
              }
              forceOpenMenu={false}
              itemsGap={0}
              menuItems={
                <PlasmicLink__
                  aria-hidden={"true"}
                  aria-labelledby={"\u672a\u767b\u5f55"}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__oyZpW,
                    "\u672a\u767b\u5f55"
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                  target={undefined}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "var(--token-jgohepLVeKvh)" }}
                    >
                      {"\u8d75\u533b\u751f"}
                    </span>
                  </React.Fragment>
                </PlasmicLink__>
              }
              openButton={
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__eDvpa)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={"https://static1.plasmic.app/menu.svg"}
                />
              }
              responsiveBreakpoint={0}
            />

            <微信头上组件svgIcon
              className={classNames(projectcss.all, sty.svg__wmEoY)}
              role={"img"}
            />

            <StatusBarsvgIcon
              className={classNames(projectcss.all, sty.svg__h5Bv0)}
              role={"img"}
            />

            <section className={classNames(projectcss.all, sty.section__ny8Yq)}>
              <div className={classNames(projectcss.all, sty.freeBox__e7Qbb)}>
                <走路svgIcon
                  className={classNames(projectcss.all, sty.svg__uunbh)}
                  role={"img"}
                />

                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__rDnZ
                  )}
                  component={Link}
                  href={"https://www.plasmic.app/"}
                  platform={"nextjs"}
                >
                  {"\u8bc4\u4f30"}
                </PlasmicLink__>
              </div>
              <诊断报告svgIcon
                className={classNames(projectcss.all, sty.svg___8VTyc)}
                role={"img"}
              />

              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__vFaN
                )}
                component={Link}
                href={"https://www.plasmic.app/"}
                platform={"nextjs"}
              >
                {"\u62a5\u544a"}
              </PlasmicLink__>
            </section>
            <AntdButton
              className={classNames("__wab_instance", sty.button__z1JEf)}
              danger={false}
              disabled={false}
              ghost={false}
              loading={false}
              onClick={async () => {
                const $steps = {};

                $steps["updateState请输入患者信息Open"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["请输入患者信息", "open"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateState请输入患者信息Open"] != null &&
                  typeof $steps["updateState请输入患者信息Open"] === "object" &&
                  typeof $steps["updateState请输入患者信息Open"].then ===
                    "function"
                ) {
                  $steps["updateState请输入患者信息Open"] = await $steps[
                    "updateState请输入患者信息Open"
                  ];
                }
              }}
              submitsForm={false}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dhxFk
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#000000" }}
                  >
                    {"\u795e\u7ecf\u529f\u80fd\u8bc4\u4f30"}
                  </span>
                </React.Fragment>
              </div>
              <神经svgIcon
                className={classNames(projectcss.all, sty.svg___7Qtvi)}
                role={"img"}
              />
            </AntdButton>
            <Dialog
              data-plasmic-name={"\u8bf7\u8f93\u5165\u60a3\u8005\u4fe1\u606f"}
              data-plasmic-override={overrides.请输入患者信息}
              body={
                <React.Fragment>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__gvYpc)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5GWiD
                      )}
                    >
                      {
                        "\u59d3\u540d\n\u6027\u522b\n\u624b\u673a\u53f7\n\u8eab\u9ad8\n\u5e74\u9f84"
                      }
                    </div>
                    <AntdRadioGroup
                      data-plasmic-name={"radioGroup"}
                      data-plasmic-override={overrides.radioGroup}
                      className={classNames("__wab_instance", sty.radioGroup)}
                      onChange={generateStateOnChangeProp($state, [
                        "radioGroup",
                        "value"
                      ])}
                      options={(() => {
                        const __composite = [
                          { value: null, label: null },
                          { value: null, label: null }
                        ];
                        __composite["0"]["value"] = "\u7537";
                        __composite["0"]["label"] = "\u7537";
                        __composite["1"]["value"] = "\u5973";
                        __composite["1"]["label"] = "\u5973";
                        return __composite;
                      })()}
                      value={generateStateValueProp($state, [
                        "radioGroup",
                        "value"
                      ])}
                    >
                      <AntdRadio
                        className={classNames(
                          "__wab_instance",
                          sty.radio__mgXap
                        )}
                        value={"op1"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___94Itc
                          )}
                        >
                          {"Option 1"}
                        </div>
                      </AntdRadio>
                      <AntdRadio
                        className={classNames(
                          "__wab_instance",
                          sty.radio__v0Vrz
                        )}
                        value={"op2"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__uwrbX
                          )}
                        >
                          {"Option 2"}
                        </div>
                      </AntdRadio>
                    </AntdRadioGroup>
                    <TextInput
                      data-plasmic-name={"textInput"}
                      data-plasmic-override={overrides.textInput}
                      autoFocus={false}
                      className={classNames("__wab_instance", sty.textInput)}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={"\u8bf7\u8f93\u5165"}
                      required={false}
                      value={
                        generateStateValueProp($state, [
                          "textInput",
                          "value"
                        ]) ?? ""
                      }
                    />

                    <TextInput
                      data-plasmic-name={"textInput2"}
                      data-plasmic-override={overrides.textInput2}
                      autoFocus={false}
                      className={classNames("__wab_instance", sty.textInput2)}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput2",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={"\u8bf7\u8f93\u5165"}
                      required={false}
                      value={
                        generateStateValueProp($state, [
                          "textInput2",
                          "value"
                        ]) ?? ""
                      }
                    />

                    <TextInput
                      data-plasmic-name={"textInput3"}
                      data-plasmic-override={overrides.textInput3}
                      autoFocus={false}
                      className={classNames("__wab_instance", sty.textInput3)}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput3",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={"\u8bf7\u8f93\u5165"}
                      required={false}
                      value={
                        generateStateValueProp($state, [
                          "textInput3",
                          "value"
                        ]) ?? ""
                      }
                    />

                    <TextInput
                      data-plasmic-name={"textInput4"}
                      data-plasmic-override={overrides.textInput4}
                      autoFocus={false}
                      className={classNames("__wab_instance", sty.textInput4)}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput4",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={"\u8bf7\u8f93\u5165"}
                      required={false}
                      value={
                        generateStateValueProp($state, [
                          "textInput4",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </Stack__>
                  <Button
                    className={classNames("__wab_instance", sty.button__qmI8N)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__o0Mnx
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "var(--token-jgohepLVeKvh)" }}
                        >
                          {"\u786e\u8ba4"}
                        </span>
                      </React.Fragment>
                    </div>
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button__kVwNs)}
                    color={"softSand"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateState请输入患者信息Open"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["请输入患者信息", "open"]
                              },
                              operation: 0
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateState请输入患者信息Open"] != null &&
                        typeof $steps["updateState请输入患者信息Open"] ===
                          "object" &&
                        typeof $steps["updateState请输入患者信息Open"].then ===
                          "function"
                      ) {
                        $steps["updateState请输入患者信息Open"] = await $steps[
                          "updateState请输入患者信息Open"
                        ];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__y7Ag
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#1B1B1BD9" }}
                        >
                          {"\u5173\u95ed"}
                        </span>
                      </React.Fragment>
                    </div>
                  </Button>
                </React.Fragment>
              }
              className={classNames("__wab_instance", sty.请输入患者信息)}
              noTrigger={true}
              onOpenChange={generateStateOnChangeProp($state, [
                "请输入患者信息",
                "open"
              ])}
              open={generateStateValueProp($state, ["请输入患者信息", "open"])}
              title={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qtlYi
                  )}
                >
                  {"\u8bf7\u8f93\u5165\u60a3\u8005\u4fe1\u606f"}
                </div>
              }
              trigger={null}
            />
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navigationBar",
    "\u8bf7\u8f93\u5165\u60a3\u8005\u4fe1\u606f",
    "radioGroup",
    "textInput",
    "textInput2",
    "textInput3",
    "textInput4"
  ],
  navigationBar: ["navigationBar"],
  请输入患者信息: [
    "\u8bf7\u8f93\u5165\u60a3\u8005\u4fe1\u606f",
    "radioGroup",
    "textInput",
    "textInput2",
    "textInput3",
    "textInput4"
  ],
  radioGroup: ["radioGroup"],
  textInput: ["textInput"],
  textInput2: ["textInput2"],
  textInput3: ["textInput3"],
  textInput4: ["textInput4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  请输入患者信息: typeof Dialog;
  radioGroup: typeof AntdRadioGroup;
  textInput: typeof TextInput;
  textInput2: typeof TextInput;
  textInput3: typeof TextInput;
  textInput4: typeof TextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmic_36小程序评估神经功能评估__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmic_36小程序评估神经功能评估__VariantsArgs;
    args?: Plasmic_36小程序评估神经功能评估__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<Plasmic_36小程序评估神经功能评估__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      Plasmic_36小程序评估神经功能评估__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: Plasmic_36小程序评估神经功能评估__ArgProps,
          internalVariantPropNames:
            Plasmic_36小程序评估神经功能评估__VariantProps
        }),
      [props, nodeName]
    );
    return Plasmic_36小程序评估神经功能评估__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName =
      "Plasmic_36\u5c0f\u7a0b\u5e8f\u8bc4\u4f30\u795e\u7ecf\u529f\u80fd\u8bc4\u4f30";
  } else {
    func.displayName = `Plasmic_36小程序评估神经功能评估.${nodeName}`;
  }
  return func;
}

export const Plasmic_36小程序评估神经功能评估 = Object.assign(
  // Top-level Plasmic_36小程序评估神经功能评估 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    请输入患者信息: makeNodeComponent(
      "\u8bf7\u8f93\u5165\u60a3\u8005\u4fe1\u606f"
    ),
    radioGroup: makeNodeComponent("radioGroup"),
    textInput: makeNodeComponent("textInput"),
    textInput2: makeNodeComponent("textInput2"),
    textInput3: makeNodeComponent("textInput3"),
    textInput4: makeNodeComponent("textInput4"),

    // Metadata about props expected for Plasmic_36小程序评估神经功能评估
    internalVariantProps: Plasmic_36小程序评估神经功能评估__VariantProps,
    internalArgProps: Plasmic_36小程序评估神经功能评估__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default Plasmic_36小程序评估神经功能评估;
/* prettier-ignore-end */
