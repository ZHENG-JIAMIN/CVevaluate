// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mwGzpoHinpZ8pmKKQjKC6Q
// Component: VZu-WFpRaYeJ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: mwGzpoHinpZ8pmKKQjKC6Q/projectcss
import sty from "./Plasmic上传视频.module.css"; // plasmic-import: VZu-WFpRaYeJ/css

import 视频拍摄教学svgIcon from "./icons/PlasmicIcon__\u89C6\u9891\u62CD\u6444\u6559\u5B66svg"; // plasmic-import: xNhX_8rkGqNg/icon
import 上传视频svg2Icon from "./icons/PlasmicIcon__\u4E0A\u4F20\u89C6\u9891svg2"; // plasmic-import: gb5_G6hD3l7d/icon

createPlasmicElementProxy;

export type Plasmic上传视频__VariantMembers = {};
export type Plasmic上传视频__VariantsArgs = {};
type VariantPropType = keyof Plasmic上传视频__VariantsArgs;
export const Plasmic上传视频__VariantProps = new Array<VariantPropType>();

export type Plasmic上传视频__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof Plasmic上传视频__ArgsType;
export const Plasmic上传视频__ArgProps = new Array<ArgPropType>("children");

export type Plasmic上传视频__OverridesType = {
  root?: Flex__<"div">;
};

export interface Default上传视频Props {
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function Plasmic上传视频__RenderFunc(props: {
  variants: Plasmic上传视频__VariantsArgs;
  args: Plasmic上传视频__ArgsType;
  overrides: Plasmic上传视频__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      {renderPlasmicSlot({
        defaultContents: (
          <React.Fragment>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___3Rrxc
              )}
            >
              {"1.\u5750\u59ff"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ozrbr
              )}
            >
              {"\u89c6\u9891\u62cd\u6444\u6559\u5b66"}
            </div>
            <视频拍摄教学svgIcon
              className={classNames(projectcss.all, sty.svg___5VUtx)}
              role={"img"}
            />

            <UploadWrapper
              accept={""}
              className={classNames("__wab_instance", sty.upload__qmKcx)}
              files={[]}
              showUploadList={true}
            >
              <AntdButton
                className={classNames("__wab_instance", sty.button__mOv9H)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7EN8R
                  )}
                >
                  {"\u70b9\u51fb\u4e0a\u4f20\u89c6\u9891"}
                </div>
                <上传视频svg2Icon
                  className={classNames(projectcss.all, sty.svg__qtOa)}
                  role={"img"}
                />
              </AntdButton>
            </UploadWrapper>
          </React.Fragment>
        ),
        value: args.children
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmic上传视频__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmic上传视频__VariantsArgs;
    args?: Plasmic上传视频__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<Plasmic上传视频__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      Plasmic上传视频__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: Plasmic上传视频__ArgProps,
          internalVariantPropNames: Plasmic上传视频__VariantProps
        }),
      [props, nodeName]
    );
    return Plasmic上传视频__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic\u4e0a\u4f20\u89c6\u9891";
  } else {
    func.displayName = `Plasmic上传视频.${nodeName}`;
  }
  return func;
}

export const Plasmic上传视频 = Object.assign(
  // Top-level Plasmic上传视频 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for Plasmic上传视频
    internalVariantProps: Plasmic上传视频__VariantProps,
    internalArgProps: Plasmic上传视频__ArgProps
  }
);

export default Plasmic上传视频;
/* prettier-ignore-end */
