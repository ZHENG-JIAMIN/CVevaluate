// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mwGzpoHinpZ8pmKKQjKC6Q
// Component: bHsqy9yMtJUm

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: mwGzpoHinpZ8pmKKQjKC6Q/projectcss
import sty from "./Plasmic小程序编辑基本信息.module.css"; // plasmic-import: bHsqy9yMtJUm/css

import 微信头上组件svgIcon from "./icons/PlasmicIcon__\u5FAE\u4FE1\u5934\u4E0A\u7EC4\u4EF6svg"; // plasmic-import: 2urmVQ_gGgJw/icon
import StatusBarsvgIcon from "./icons/PlasmicIcon__StatusBarsvg"; // plasmic-import: EesfGyxQueq1/icon

createPlasmicElementProxy;

export type Plasmic小程序编辑基本信息__VariantMembers = {};
export type Plasmic小程序编辑基本信息__VariantsArgs = {};
type VariantPropType = keyof Plasmic小程序编辑基本信息__VariantsArgs;
export const Plasmic小程序编辑基本信息__VariantProps =
  new Array<VariantPropType>();

export type Plasmic小程序编辑基本信息__ArgsType = {};
type ArgPropType = keyof Plasmic小程序编辑基本信息__ArgsType;
export const Plasmic小程序编辑基本信息__ArgProps = new Array<ArgPropType>();

export type Plasmic小程序编辑基本信息__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  navigationBar?: Flex__<typeof NavigationBar>;
  radioGroup?: Flex__<typeof AntdRadioGroup>;
};

export interface Default小程序编辑基本信息Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function Plasmic小程序编辑基本信息__RenderFunc(props: {
  variants: Plasmic小程序编辑基本信息__VariantsArgs;
  args: Plasmic小程序编辑基本信息__ArgsType;
  overrides: Plasmic小程序编辑基本信息__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "radioGroup.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <NavigationBar
              data-plasmic-name={"navigationBar"}
              data-plasmic-override={overrides.navigationBar}
              brand={
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__nclCe
                  )}
                  component={Link}
                  href={"#"}
                  platform={"nextjs"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__dfjAq)}
                    displayHeight={"55px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    src={{
                      src: "/plasmic/c_vevaluate/images/人像201Svg.svg",
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }}
                  />
                </PlasmicLink__>
              }
              className={classNames("__wab_instance", sty.navigationBar)}
              closeButton={
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__jFq0A)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={"https://static1.plasmic.app/close.svg"}
                />
              }
              forceOpenMenu={false}
              itemsGap={0}
              menuItems={
                <PlasmicLink__
                  aria-hidden={"true"}
                  aria-labelledby={"\u672a\u767b\u5f55"}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link___3IlNa,
                    "\u672a\u767b\u5f55"
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                  target={undefined}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "var(--token-jgohepLVeKvh)" }}
                    >
                      {"\u672a\u767b\u5f55"}
                    </span>
                  </React.Fragment>
                </PlasmicLink__>
              }
              openButton={
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__mb7Wa)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={"https://static1.plasmic.app/menu.svg"}
                />
              }
              responsiveBreakpoint={0}
            />

            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__zBrOb
              )}
              component={Link}
              href={"https://www.plasmic.app/"}
              platform={"nextjs"}
            >
              {"\u63d0\u4ea4"}
            </PlasmicLink__>
            <微信头上组件svgIcon
              className={classNames(projectcss.all, sty.svg__pdkx)}
              role={"img"}
            />

            <StatusBarsvgIcon
              className={classNames(projectcss.all, sty.svg__mwWwd)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tWr00
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token--ypw6enySR1T)" }}
                >
                  {"*"}
                </span>
                <React.Fragment>
                  {"\u59d3\u540d                    \u9ec4\u9ec4\n"}
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#ff4d4f" }}
                >
                  {"*"}
                </span>
                <React.Fragment>{""}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token-RvPI6LyeIPmd)" }}
                >
                  {"\u6027"}
                </span>
                <React.Fragment>{""}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token-0jflij2Drauk)" }}
                >
                  {"\u522b    "}
                </span>
                <React.Fragment>{"\n"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token--ypw6enySR1T)" }}
                >
                  {"*"}
                </span>
                <React.Fragment>{""}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token-0jflij2Drauk)" }}
                >
                  {"\u51fa\u751f\u65e5\u671f             1992-06-08"}
                </span>
                <React.Fragment>{"\n"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#ff4d4f" }}
                >
                  {"*"}
                </span>
                <React.Fragment>{""}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token-0jflij2Drauk)" }}
                >
                  {"\u624b\u673a\u53f7                 15369863205"}
                </span>
                <React.Fragment>{"\n"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#ff4d4f" }}
                >
                  {"*"}
                </span>
                <React.Fragment>{""}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token-0jflij2Drauk)" }}
                >
                  {"\u8054\u7cfb\u4eba                 13689524892"}
                </span>
                <React.Fragment>{"\n"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#ff4d4f" }}
                >
                  {"*"}
                </span>
                <React.Fragment>{""}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token-0jflij2Drauk)" }}
                >
                  {"\u7d27\u6025\u8054\u7cfb\u4eba          16982258995  "}
                </span>
                <React.Fragment>{"\n"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#ff4d4f" }}
                >
                  {"*"}
                </span>
                <React.Fragment>{""}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token-0jflij2Drauk)" }}
                >
                  {"\u7c7b\u578b                     \u624b\u672f\u7c7b\u578b"}
                </span>
                <React.Fragment>{"\n"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#ff4d4f" }}
                >
                  {"*"}
                </span>
                <React.Fragment>{""}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token-0jflij2Drauk)" }}
                >
                  {"\u95e8\u8bca\u53f7                  1"}
                </span>
                <React.Fragment>{"\n"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#ff4d4f" }}
                >
                  {"*"}
                </span>
                <React.Fragment>{""}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token-0jflij2Drauk)" }}
                >
                  {"\u4f4f\u9662\u53f7                  238344"}
                </span>
                <React.Fragment>{"\n"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#ff4d4f" }}
                >
                  {"*"}
                </span>
                <React.Fragment>{""}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token-0jflij2Drauk)" }}
                >
                  {"\u5e8a\u4f4d\u53f7                  521"}
                </span>
                <React.Fragment>{"\n"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#ff4d4f" }}
                >
                  {"*"}
                </span>
                <React.Fragment>{""}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token-0jflij2Drauk)" }}
                >
                  {"\u4f4f\u5740\uff08\u7701\uff09           \u5317\u4eac"}
                </span>
              </React.Fragment>
            </div>
            <AntdRadioGroup
              data-plasmic-name={"radioGroup"}
              data-plasmic-override={overrides.radioGroup}
              className={classNames("__wab_instance", sty.radioGroup)}
              onChange={generateStateOnChangeProp($state, [
                "radioGroup",
                "value"
              ])}
              options={(() => {
                const __composite = [
                  { value: null, label: null },
                  { value: null, label: null }
                ];
                __composite["0"]["value"] = "\u7537";
                __composite["0"]["label"] = "\u7537";
                __composite["1"]["value"] = "\u5973";
                __composite["1"]["label"] = "\u5973";
                return __composite;
              })()}
              value={generateStateValueProp($state, ["radioGroup", "value"])}
            >
              <AntdRadio
                className={classNames("__wab_instance", sty.radio__ngQNw)}
                value={"op1"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9XvBm
                  )}
                >
                  {"Option 1"}
                </div>
              </AntdRadio>
              <AntdRadio
                className={classNames("__wab_instance", sty.radio__f3AEl)}
                value={"op2"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dupEj
                  )}
                >
                  {"Option 2"}
                </div>
              </AntdRadio>
            </AntdRadioGroup>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "section", "navigationBar", "radioGroup"],
  section: ["section", "navigationBar", "radioGroup"],
  navigationBar: ["navigationBar"],
  radioGroup: ["radioGroup"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  navigationBar: typeof NavigationBar;
  radioGroup: typeof AntdRadioGroup;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmic小程序编辑基本信息__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmic小程序编辑基本信息__VariantsArgs;
    args?: Plasmic小程序编辑基本信息__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<Plasmic小程序编辑基本信息__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      Plasmic小程序编辑基本信息__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: Plasmic小程序编辑基本信息__ArgProps,
          internalVariantPropNames: Plasmic小程序编辑基本信息__VariantProps
        }),
      [props, nodeName]
    );
    return Plasmic小程序编辑基本信息__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName =
      "Plasmic\u5c0f\u7a0b\u5e8f\u7f16\u8f91\u57fa\u672c\u4fe1\u606f";
  } else {
    func.displayName = `Plasmic小程序编辑基本信息.${nodeName}`;
  }
  return func;
}

export const Plasmic小程序编辑基本信息 = Object.assign(
  // Top-level Plasmic小程序编辑基本信息 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    navigationBar: makeNodeComponent("navigationBar"),
    radioGroup: makeNodeComponent("radioGroup"),

    // Metadata about props expected for Plasmic小程序编辑基本信息
    internalVariantProps: Plasmic小程序编辑基本信息__VariantProps,
    internalArgProps: Plasmic小程序编辑基本信息__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default Plasmic小程序编辑基本信息;
/* prettier-ignore-end */
