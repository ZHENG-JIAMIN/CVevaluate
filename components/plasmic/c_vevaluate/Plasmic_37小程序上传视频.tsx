// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mwGzpoHinpZ8pmKKQjKC6Q
// Component: mAa3MUe7NGTC

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import 上传视频 from "../../\u4E0A\u4F20\u89C6\u9891"; // plasmic-import: VZu-WFpRaYeJ/component
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Video } from "@plasmicpkgs/plasmic-basic-components";
import Checkbox from "../../Checkbox"; // plasmic-import: IeqjBi5ezEV_/component
import Button from "../../Button"; // plasmic-import: O-sjQ-BfXg_q/component
import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: mwGzpoHinpZ8pmKKQjKC6Q/projectcss
import sty from "./Plasmic_37小程序上传视频.module.css"; // plasmic-import: mAa3MUe7NGTC/css

import 上传视频svg2Icon from "./icons/PlasmicIcon__\u4E0A\u4F20\u89C6\u9891svg2"; // plasmic-import: gb5_G6hD3l7d/icon
import 微信头上组件svgIcon from "./icons/PlasmicIcon__\u5FAE\u4FE1\u5934\u4E0A\u7EC4\u4EF6svg"; // plasmic-import: 2urmVQ_gGgJw/icon
import StatusBarsvgIcon from "./icons/PlasmicIcon__StatusBarsvg"; // plasmic-import: EesfGyxQueq1/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: CwTBZ1IwI4if/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: 2dD8tiAwY1Ar/icon

createPlasmicElementProxy;

export type Plasmic_37小程序上传视频__VariantMembers = {};
export type Plasmic_37小程序上传视频__VariantsArgs = {};
type VariantPropType = keyof Plasmic_37小程序上传视频__VariantsArgs;
export const Plasmic_37小程序上传视频__VariantProps =
  new Array<VariantPropType>();

export type Plasmic_37小程序上传视频__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof Plasmic_37小程序上传视频__ArgsType;
export const Plasmic_37小程序上传视频__ArgProps = new Array<ArgPropType>(
  "children"
);

export type Plasmic_37小程序上传视频__OverridesType = {
  root?: Flex__<"div">;
  视频上传?: Flex__<"section">;
  text?: Flex__<"div">;
  navigationBar?: Flex__<typeof NavigationBar>;
};

export interface Default_37小程序上传视频Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function Plasmic_37小程序上传视频__RenderFunc(props: {
  variants: Plasmic_37小程序上传视频__VariantsArgs;
  args: Plasmic_37小程序上传视频__ArgsType;
  overrides: Plasmic_37小程序上传视频__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
          onClick={async event => {
            const $steps = {};

            $steps["goTo37上传视频提示"] = true
              ? (() => {
                  const actionArgs = { destination: `/3-7-上传视频提示` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goTo37上传视频提示"] != null &&
              typeof $steps["goTo37上传视频提示"] === "object" &&
              typeof $steps["goTo37上传视频提示"].then === "function"
            ) {
              $steps["goTo37上传视频提示"] = await $steps["goTo37上传视频提示"];
            }
          }}
        >
          <section
            data-plasmic-name={"\u89c6\u9891\u4e0a\u4f20"}
            data-plasmic-override={overrides.视频上传}
            className={classNames(projectcss.all, sty.视频上传)}
          >
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {
                "\u8bf7\u6839\u636e\u201c\u89c6\u9891\u62cd\u6444\u6559\u5b66\u201d\u4e2d\u7684\u63d0\u793a\u62cd\u6444\u89c6\u9891\uff0c\n\u5426\u5219\u5c06\u5f71\u54cd\u8bc4\u4f30\u7ed3\u679c\u3002"
              }
            </div>
            {renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <Timer
                    className={classNames("__wab_instance", sty.timer__pbiYy)}
                    isRunning={true}
                    runWhileEditing={false}
                  />

                  <上传视频
                    className={classNames(
                      "__wab_instance",
                      sty.上传视频__xDpUb
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8L48
                      )}
                    >
                      {"1.\u5750\u59ff"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lIsYz
                      )}
                    >
                      {"\u89c6\u9891\u62cd\u6444\u6559\u5b66"}
                    </div>
                    <UploadWrapper
                      accept={"video/*"}
                      className={classNames(
                        "__wab_instance",
                        sty.upload__iMyAk
                      )}
                      dragAndDropFiles={false}
                      files={(() => {
                        try {
                          return undefined;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      listType={"picture"}
                      multiple={false}
                      showUploadList={false}
                    >
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__aQcKl
                        )}
                        danger={false}
                        disabled={false}
                        ghost={false}
                        loading={false}
                        shape={"default"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__em3QE
                          )}
                        >
                          {"\u70b9\u51fb\u4e0a\u4f20\u89c6\u9891"}
                        </div>
                        <上传视频svg2Icon
                          className={classNames(projectcss.all, sty.svg__gTyrf)}
                          role={"img"}
                        />
                      </AntdButton>
                    </UploadWrapper>
                  </上传视频>
                  <上传视频
                    className={classNames(
                      "__wab_instance",
                      sty.上传视频__b4GfX
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tUb7T
                      )}
                    >
                      {"1.\u81ea\u7136\u5750\u8d77"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jDv0R
                      )}
                    >
                      {"\u89c6\u9891\u62cd\u6444\u6559\u5b66"}
                    </div>
                    <UploadWrapper
                      accept={""}
                      className={classNames(
                        "__wab_instance",
                        sty.upload__lgfR3
                      )}
                      files={[]}
                      showUploadList={true}
                    >
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__xGlj9
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xQcf9
                          )}
                        >
                          {"\u70b9\u51fb\u4e0a\u4f20\u89c6\u9891"}
                        </div>
                        <上传视频svg2Icon
                          className={classNames(projectcss.all, sty.svg__c9Hhd)}
                          role={"img"}
                        />
                      </AntdButton>
                    </UploadWrapper>
                  </上传视频>
                  <上传视频
                    className={classNames(
                      "__wab_instance",
                      sty.上传视频__yj6YR
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__w0Qov
                      )}
                    >
                      {"3.\u5750\u4e0b"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mVyyw
                      )}
                    >
                      {"\u89c6\u9891\u62cd\u6444\u6559\u5b66"}
                    </div>
                    <UploadWrapper
                      accept={""}
                      className={classNames("__wab_instance", sty.upload__aQkk)}
                      files={[]}
                      showUploadList={true}
                    >
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__djKo4
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vYkyH
                          )}
                        >
                          {"\u70b9\u51fb\u4e0a\u4f20\u89c6\u9891"}
                        </div>
                        <上传视频svg2Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___5GCSl
                          )}
                          role={"img"}
                        />
                      </AntdButton>
                    </UploadWrapper>
                  </上传视频>
                  <微信头上组件svgIcon
                    className={classNames(projectcss.all, sty.svg__eSqr0)}
                    role={"img"}
                  />

                  <Video
                    className={classNames(
                      "__wab_instance",
                      sty.htmlVideo__pkFSe
                    )}
                    controls={true}
                    src={
                      "https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.webm"
                    }
                  />

                  <Video
                    autoPlay={false}
                    className={classNames(
                      "__wab_instance",
                      sty.htmlVideo___0FQaI
                    )}
                    controls={true}
                    src={
                      "https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.webm"
                    }
                  />

                  <Video
                    className={classNames(
                      "__wab_instance",
                      sty.htmlVideo__oSctn
                    )}
                    controls={true}
                    src={
                      "https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.webm"
                    }
                  />

                  <StatusBarsvgIcon
                    className={classNames(projectcss.all, sty.svg__wzKQp)}
                    role={"img"}
                  />

                  <Checkbox
                    className={classNames(
                      "__wab_instance",
                      sty.checkbox__xhvzT
                    )}
                  >
                    {"\u4f7f\u7528\u80f3\u818a\u5e2e\u52a9"}
                  </Checkbox>
                  <Checkbox
                    className={classNames("__wab_instance", sty.checkbox__c4Xr)}
                  >
                    {"\u5b58\u5728\u5b89\u5168\u98ce\u9669"}
                  </Checkbox>
                  <Button
                    className={classNames("__wab_instance", sty.button__fUuCz)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__htIqe
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "var(--token-jgohepLVeKvh)" }}
                        >
                          {"\u63d0\u4ea4"}
                        </span>
                      </React.Fragment>
                    </div>
                  </Button>
                </React.Fragment>
              ),
              value: args.children
            })}
            <NavigationBar
              data-plasmic-name={"navigationBar"}
              data-plasmic-override={overrides.navigationBar}
              brand={
                <React.Fragment>
                  <微信头上组件svgIcon
                    className={classNames(projectcss.all, sty.svg__ut5Wq)}
                    role={"img"}
                  />

                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__bQf7O
                    )}
                    component={Link}
                    href={"#"}
                    platform={"nextjs"}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__c2Mky)}
                      displayHeight={"55px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={{
                        src: "/plasmic/c_vevaluate/images/人像201Svg.svg",
                        fullWidth: 150,
                        fullHeight: 150,
                        aspectRatio: 1
                      }}
                    />
                  </PlasmicLink__>
                </React.Fragment>
              }
              className={classNames("__wab_instance", sty.navigationBar)}
              closeButton={
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__r6Jk)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={"https://static1.plasmic.app/close.svg"}
                />
              }
              forceOpenMenu={false}
              itemsGap={0}
              menuItems={
                <PlasmicLink__
                  aria-hidden={"true"}
                  aria-labelledby={"\u672a\u767b\u5f55"}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link___0EQqh,
                    "\u672a\u767b\u5f55"
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                  target={undefined}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "var(--token-jgohepLVeKvh)" }}
                    >
                      {"\u672a\u767b\u5f55"}
                    </span>
                  </React.Fragment>
                </PlasmicLink__>
              }
              openButton={
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__e1XcJ)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={"https://static1.plasmic.app/menu.svg"}
                />
              }
              responsiveBreakpoint={0}
            />

            <StatusBarsvgIcon
              className={classNames(projectcss.all, sty.svg__yhwgm)}
              role={"img"}
            />
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "\u89c6\u9891\u4e0a\u4f20", "text", "navigationBar"],
  视频上传: ["\u89c6\u9891\u4e0a\u4f20", "text", "navigationBar"],
  text: ["text"],
  navigationBar: ["navigationBar"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  视频上传: "section";
  text: "div";
  navigationBar: typeof NavigationBar;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmic_37小程序上传视频__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmic_37小程序上传视频__VariantsArgs;
    args?: Plasmic_37小程序上传视频__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<Plasmic_37小程序上传视频__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      Plasmic_37小程序上传视频__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: Plasmic_37小程序上传视频__ArgProps,
          internalVariantPropNames: Plasmic_37小程序上传视频__VariantProps
        }),
      [props, nodeName]
    );
    return Plasmic_37小程序上传视频__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic_37\u5c0f\u7a0b\u5e8f\u4e0a\u4f20\u89c6\u9891";
  } else {
    func.displayName = `Plasmic_37小程序上传视频.${nodeName}`;
  }
  return func;
}

export const Plasmic_37小程序上传视频 = Object.assign(
  // Top-level Plasmic_37小程序上传视频 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    视频上传: makeNodeComponent("\u89c6\u9891\u4e0a\u4f20"),
    text: makeNodeComponent("text"),
    navigationBar: makeNodeComponent("navigationBar"),

    // Metadata about props expected for Plasmic_37小程序上传视频
    internalVariantProps: Plasmic_37小程序上传视频__VariantProps,
    internalArgProps: Plasmic_37小程序上传视频__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default Plasmic_37小程序上传视频;
/* prettier-ignore-end */
